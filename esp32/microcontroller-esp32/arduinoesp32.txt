#include <WiFi.h>
#include <PubSubClient.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <ArduinoJson.h>

// OLED Setup
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// WiFi Credentials
const char* ssid = "esp32";
const char* password = "brokeboys";

// MQTT Setup
const char* mqtt_server = "broker.hivemq.com";
const int mqtt_port = 1883;
const char* mqtt_topic_request = "stocks/request";
const char* mqtt_topic_response = "stocks/response/+";
const char* mqtt_client_id = "esp32_stock_tracker_123";

WiFiClient espClient;
PubSubClient client(espClient);

// Stock symbols to track
const char* stocks[] = {"AAPL", "AMZN", "TSLA", "MSFT", "PFE", "OXY", "EBAY", "FDX"};
int stockIndex = 0;
unsigned long lastUpdate = 0;
const long updateInterval = 8000; // 8 seconds per stock

void setupDisplay() {
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("OLED failed"));
    while (1);
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("Stock Tracker");
  display.display();
  delay(2000);
}

void connectWiFi() {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("Connecting WiFi...");
  display.display();

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    display.print(".");
    display.display();
  }

  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("WiFi Connected!");
  display.print("IP: ");
  display.println(WiFi.localIP());
  display.display();
  delay(2000);
}

void callback(char* topic, byte* payload, unsigned int length) {
  StaticJsonDocument<512> doc;
  DeserializationError error = deserializeJson(doc, payload, length);
  if (error) {
    Serial.println("Failed to parse MQTT message");
    return;
  }

  String symbol = doc["symbol"];
  float current = doc["current_price"];
  float predicted = doc["predicted_price"];
  float profit = doc["predicted_profit"];

  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.println("Predicted:");
  display.setCursor(0, 10);
  display.print(symbol);
  display.print(": $");
  display.println(current, 2);
  display.setCursor(0, 25);
  display.print("Next: $");
  display.println(predicted, 2);
  display.setCursor(0, 40);
  display.print("Gain: ");
  display.print(profit, 1);
  display.println("%");
  display.display();

  Serial.println("=== MQTT Stock Prediction ===");
  Serial.print(symbol); Serial.print(" | Current: $");
  Serial.print(current); Serial.print(" | Predicted: $");
  Serial.print(predicted); Serial.print(" | Profit: ");
  Serial.print(profit); Serial.println("%");
}

void reconnectMQTT() {
  while (!client.connected()) {
    display.clearDisplay();
    display.setCursor(0, 0);
    display.println("Connecting MQTT...");
    display.display();

    if (client.connect(mqtt_client_id)) {
      client.subscribe(mqtt_topic_response);
      display.clearDisplay();
      display.setCursor(0, 0);
      display.println("MQTT Connected!");
      display.display();
      delay(1000);
    } else {
      display.clearDisplay();
      display.setCursor(0, 0);
      display.print("Failed, rc=");
      display.println(client.state());
      display.println("Retry in 5s...");
      display.display();
      delay(5000);
    }
  }
}

void requestStockPrediction(const String& symbol) {
  StaticJsonDocument<128> doc;
  doc["symbol"] = symbol;
  String payload;
  serializeJson(doc, payload);
  client.publish(mqtt_topic_request, payload.c_str());

  Serial.print("Requested prediction for: ");
  Serial.println(symbol);
}

void setup() {
  Serial.begin(115200);
  setupDisplay();
  connectWiFi();

  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
  reconnectMQTT();

  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.println("System Ready");
  display.println("Mode: MQTT");
  display.display();
  delay(2000);
}

void loop() {
  if (!client.connected()) {
    reconnectMQTT();
  }
  client.loop();

  if (millis() - lastUpdate >= updateInterval) {
    requestStockPrediction(stocks[stockIndex]);
    stockIndex = (stockIndex + 1) % (sizeof(stocks) / sizeof(stocks[0]));
    lastUpdate = millis();
  }
}